#!/usr/bin/env python
# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt
import h5py
import tqdm
import scipy.io
import tifffile

import sys
import os
import argparse


parser = argparse.ArgumentParser()
parser.add_argument('filename')
parser.add_argument('--save', action='store_true')
parser.add_argument('--queries', nargs='+', default=[])
args = parser.parse_args()

fname = args.filename
save_tiff = args.save
queries = args.queries

try:
    f = h5py.File(fname, 'r')
    dset = f['object']
    obj = dset['real'][...] + 1j * dset['imag'][...]
    obj = np.transpose(obj)
    shrink_len = (20 / 1200 * np.array(obj.shape)).astype(int)
    obj = obj[shrink_len[0]:-shrink_len[0], shrink_len[1]:-shrink_len[1]]
except:
    f = scipy.io.loadmat(fname)
    obj = f['object']

plt.figure()
im = plt.imshow(np.angle(obj))
plt.colorbar(im)

#print(f['outputs/fourier_error_out'][...])
#plt.figure()
#plt.plot(f['outputs/fourier_error_out'][...].reshape(-1))
plt.show()

if save_tiff:
    tifffile.imwrite(os.path.splitext(fname)[0] + '.tiff', np.angle(obj))

if len(queries) > 0:
    for q in queries:
        print(q)
        q_hierarchy = q.split('/')
        v = f
        for q_this_level in q_hierarchy:
            v = v[q_this_level]
        print(v[...])
